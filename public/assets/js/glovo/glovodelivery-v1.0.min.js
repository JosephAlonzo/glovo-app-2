
var GlovoloadedMap       = false;
var GlovoloadedPage      = false;


var glovoMap = new function() {
    var $this = this;
    // Variables
    $this.version        = 1.0;
    $this.urlBase        = "https://db7150b2.ngrok.io"; //"https://shopifyglovoapp.vexecommerce.com";
    $this.workingDaysUrl = $this.urlBase + "/workingdays.json";
    $this.workingTimesUrl= $this.urlBase + "/workingtime.json";
    $this.settingid      = undefined;
    $this.workingdays    = undefined;
    $this.cbScheduleday;
    $this.cbscheduletime;
    $this.ctrlWhen      = null;


    $this.maxWeight     = 9000; //9.0KG
    $this.map;
    $this.zoom          = 16;
    $this.submit        = null;
    $this.currency      = {};
    $this.workingtext   = '';

    $this.disabled      ;
    $this.cart          = null;


    this.init = function () {
        $this = this;

        alert('sdsd');
        if (typeof glovo_setting !== 'undefined') {
            $this.settingid = glovo_setting;
        }
        if (typeof glovo_workindays !== 'undefined') {
            $this.workingdays = glovo_workindays;
        }


        if ($this.settingid == null){
            return false;
        }

        $this.cbScheduleday     = $('#glovo_schedule_day');
        $this.cbscheduletime    = $('#glovo_schedule_time');
        $this.ctrlWhen          = $('.jtoggler'); //switch

        jQuery.getJSON('/cart.js', function(cart) {
            $this.cart = cart;

            $this.getServiceAvailability();

        } );

        setTimeout(1000,function () {
            $('#glovo-map .gm-style > .gmnoprint > .gm-style-cc').removeClass('gm-style-cc');

        })

    }



    this.createMap  = function (){

        $this.map = new google.maps.Map(document.getElementById('glovo-map'), {
            zoom    : $this.zoom,
            center  : {lat: -34.397, lng: 150.644},
            zoomControl: true,
            mapTypeControl: false,
            scaleControl: true,
            streetViewControl: false,
            rotateControl: false,
            fullscreenControl: true,
            disableDefaultUI: true
        });

        console.log($this.map);
    }


    /**
     *
     */
    this.calculateWeight    = function () {

        var total_weight_grams = 0;

        $.each($this.cart.items,function (i, product) {
            total_weight_grams+= (product.grams * product.quantity);
        });


        if ( (total_weight_grams-100) > $this.maxWeight)
        {
            $('#glovo-shpping-delivery').remove();
        }else{
            $('#glovo-shpping-delivery').show();
        }
    }




    this.getWorkinDays  = function(){

        $.ajax({
            type: 'post',
            url: $this.workingDaysUrl,
            data: {'setting':$this.settingid},
            dataType : 'json',
            beforeSend: function( xhr ) {
                $this.cbScheduleday.empty();
            }
        }).done(function( response ) {

            $this.setWorkinDays(response);

        });

    }



    /**
     *
     */
    this.setWorkinDays = function( workingdays ){

        $this.cbScheduleday.find('option').remove();
        $this.cbScheduleday.prop('required','required');

        $.each(workingdays,function (i, v) {
            let option = $('<option value="' + v.id + '">' + v.text + '</option>');

            if (v.enable==false) option.prop('disabled','disabled');
            if (v.immediately!=undefined)   option.prop('immediately',v.immediately);

            $this.cbScheduleday.append(option);
        });

        $this.cbScheduleday.unbind().bind('change',function () {
            $this.getWorkingTimes($(this).val());
        });


        if( $this.cbScheduleday.find('option:eq(0)').prop('disabled')  == 'disabled' ||
            $this.cbScheduleday.find('option:eq(0)').prop('immediately') == false
        ){
            $this.ctrlWhenDisable();
        }


        $.each($this.cbScheduleday.find('option') , function (i,option) {
            if ( $(this).prop('disabled') === false){
                $this.cbScheduleday.val( $this.cbScheduleday.find('option').eq(i).val()).trigger('change');
                return false;
            }
        });


    }



    /**
     *
     * @param day
     */
    this.getWorkingTimes = function (day) {

        if ( $('option:selected', $this.cbScheduleday).attr('disabled') ) {
            return false;
        }


        var productKeys = new Array();
        $.each($this.cart.items, function (i,product) {
            productKeys.push(product.product_id)
        });


        $.ajax({
            type: 'post',
            url: $this.workingTimesUrl,
            data: {'setting':$this.settingid, 'day':day, 'products':productKeys},
            dataType : 'json',
            beforeSend: function( xhr ) {
                $this.cbscheduletime.empty();
            }
        }).done(function( response ) {

            $.each(response.hours, function (i,hour) {
                $this.cbscheduletime.append('<option value="' + hour.id + '">' + hour.text + '</option>');
            });

        });
    }



    this.getServiceAvailability = function ( ) {

        if ($this.settingid == undefined){
            return false;
        }

        var productKeys = new Array();
        $.each($this.cart.items, function (i,product) {
            productKeys.push(product.product_id)
        });


        $.ajax({
            type: 'post',
            url: $this.urlBase + "/serviceavailability.json",
            data: {'setting':$this.settingid, 'products':productKeys},
            dataType : 'json',
            beforeSend: function( xhr ) {

            }
        }).done(function( response ) {

            $this.debug(response)
            if (response.status.code == 200){
                $this.calculateWeight();
                $this.setWorkinDays(response.workingdays);
                $this.toogle();
            }else
            {
                $this.removeWrapper();
            }

        });
    }


    this.toogle = function () {
        $(document).on('jt:toggled', function(event, target) {
            $this.enableWrapper(event, target);
        });


        $this.ctrlWhen.jtoggler().trigger('change');
    }

    this.ctrlWhenDisable  = function (){
        return $this.ctrlWhen.prop('checked',false).trigger('change').prop('disabled','disabled');
    }



    this.enableWrapper  = function(event, target){

        if ($(target).prop('checked') ){
            $('.select-schedule').slideUp();
            $('#glovo_when_receive').val("immediately");
        }else{
            $('.select-schedule').slideDown();
            $('#glovo_when_receive').val("scheduled");
        }

    }


    this.removeWrapper = function(){
        $('#glovo-shpping-delivery').remove();
    }


    this.debug = function(message)
    {
        // It is always good to declare things at the top of a function,
        // to quicken the lookup!
        var i = 0, len = arguments.length;

        // Notice that the for statement is missing the initialization.
        // The initialization is already defined,
        // so no need to keep defining for each iteration.
        for( ; i < len; i += 1 ){

            // now you can perform operations on each argument,
            // including checking for the arguments type,
            // and even loop through arguments[i] if it's an array!
            // In this particular case, each argument is logged in the console.
            console.log( arguments[i] );
        }
    }
}

var GlovoloadScript = function(url, callback, type){

    if (type=="css")
    {
        var css = document.createElement("link");
        css.rel = "stylesheet";
        css.type = "text/css";
        css.href = url;
        document.getElementsByTagName("head")[0].appendChild(css);

        return true;
    }

    var script = document.createElement("script");
    script.type = "text/javascript";

    // If the browser is Internet Explorer.
    if (script.readyState){
        script.onreadystatechange = function(){
            if (script.readyState == "loaded" || script.readyState == "complete"){
                script.onreadystatechange = null;
                callback();
            }
        };
        // For any other browser.
    } else {
        script.onload = function(){
            callback();
        };
    }

    script.src = url;
    document.getElementsByTagName("head")[0].appendChild(script);
};


function initMap(){
    GlovoloadedMap = true;
    if ( GlovoloadedMap && GlovoloadedPage)
    {
        if (typeof google === 'object' && typeof google.maps === 'object') {
            glovoMap.init();
        }

    }
}



// Shorthand for $( document ).ready()
$(function() {
    GlovoloadedPage = true;
    GlovoloadScript(glovoMap.urlBase + "/assets/vendors/jquery-toogle/jtoggler.styles.css", function(){}, 'css');
    GlovoloadScript(glovoMap.urlBase + "/assets/css/glovodelivery-v1.0.css", function(){}, 'css');
    GlovoloadScript("https://maps.googleapis.com/maps/api/js?key=AIzaSyB0imoCMF83g1Yxn_USoSXnWXrtzNgt3pA&callback=initMap&&libraries=places,geometry", function(){});
});



;( function( $, window, document, undefined ) {

    "use strict";

    var pluginName = "jtoggler",
        defaults = {
            className: "",
        };

    function Toggler ( element, options ) {
        this.element = element;

        this.settings = $.extend( {}, defaults, options );
        this._defaults = defaults;
        this._name = pluginName;

        this.init();
        this.events();
    }

    $.extend( Toggler.prototype, {
        init: function() {
            var $element = $(this.element);

            if ($element.data('jtmulti-state') != null) {
                this.generateThreeStateHTML();
            } else {
                this.generateTwoStateHTML();
            }
        },
        events: function() {
            var $element = $(this.element);
            var instance = this;

            $element.on('change', this, function (event) {
                if ($element.data('jtlabel')) {
                    if ($element.data('jtlabel-success')) {
                        if ($element.prop('checked')) {
                            $element.next().next().text($element.data('jtlabel-success'));
                        } else {
                            $element.next().next().text($element.data('jtlabel'));
                        }
                    } else {
                        instance.setWarningLabelMessage();
                    }
                }

                $(document).trigger('jt:toggled', [event.target]);
            });

            if (!$element.prop('disabled')) {
                var $control = $element.next('.jtoggler-control');
                $control
                    .find('.jtoggler-radio')
                    .on('click', this, function (event) {
                        $(this)
                            .parents('.jtoggler-control')
                            .find('.jtoggler-btn-wrapper')
                            .removeClass('is-active');

                        $(this)
                            .parent()
                            .addClass('is-active');

                        if ($(event.currentTarget).parent().index() === 2) {
                            $control.addClass('is-fully-active');
                        } else {
                            $control.removeClass('is-fully-active');
                        }

                        $(document).trigger('jt:toggled:multi', [event.target]);
                    });
            }
        },
        generateTwoStateHTML: function() {
            var $element = $(this.element);

            if (!$element.hasClass('jqtoggler-inited')) {
                $element.addClass('jqtoggler-inited');
                var $wrapper = $('<label />', {
                    class: $.trim("jtoggler-wrapper " + this._defaults.className),
                });
                var $control = $('<div />', {
                    class: 'jtoggler-control',
                });
                var $handle = $('<div />', {
                    class: 'jtoggler-handle',
                });

                $control.prepend($handle);
                $element.wrap($wrapper).after($control);

                if ($element.data('jtlabel')) {

                    var $label = $('<div />', {
                        class: 'jtoggler-label',
                    });

                    if ($element.prop('checked')) {
                        if ($element.data('jtlabel-success')) {
                            $label.text($element.data('jtlabel-success'));
                        } else {
                            this.setWarningLabelMessage();
                            $label.text($element.data('jtlabel'));
                        }
                    } else {
                        $label.text($element.data('jtlabel'));
                    }

                    $control.after($label);
                }
            }
        },
        generateThreeStateHTML: function() {
            var $element = $(this.element);

            if (!$element.hasClass('jqtoggler-inited')) {
                $element.addClass('jqtoggler-inited');
                var $wrapper = $('<div />', {
                    class: $.trim("jtoggler-wrapper jtoggler-wrapper-multistate " + this._defaults.className),
                });
                var $control = $('<div />', {
                    class: 'jtoggler-control',
                });
                var $handle = $('<div />', {
                    class: 'jtoggler-handle',
                });
                for (var i = 0; i < 3; i++) {
                    var $label = $('<label />', {
                        class: 'jtoggler-btn-wrapper',
                    });
                    var $btn = $('<input />', {
                        type: 'radio',
                        name: 'options',
                        class: 'jtoggler-radio',
                    });

                    $label.append($btn);
                    $control.prepend($label);
                }
                $control.append($handle);
                $element.wrap($wrapper).after($control);
                $control.find('.jtoggler-btn-wrapper:first').addClass('is-active');
            }

        },
        setWarningLabelMessage: function() {
            console.warn('Data attribute "jtlabel-success" is not set');
        },

    } );

    $.fn[ pluginName ] = function( options ) {
        return this.each( function() {
            if ( !$.data( this, "plugin_" + pluginName ) ) {
                $.data( this, "plugin_" +
                    pluginName, new Toggler( this, options ) );
            }
        } );
    };

} )( jQuery, window, document );
